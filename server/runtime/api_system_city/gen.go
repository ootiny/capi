// tag-rt-api-builder-start: This file is generated by rt-builder, DO NOT EDIT.
package api_system_city
import (
	"github.com/ootiny/capi/server/runtime/db_city"
	"github.com/ootiny/capi/server/runtime"
)

// definition: API.System.City@CityList
type CityList struct {
	From int64 `json:"from" required:"true"`
	List []db_city.Full `json:"list" required:"true"`
}

// Action: API.System.City:AddCity
var fnAddCity FuncAddCity
type FuncAddCity = func(ctx *runtime.Context, city db_city.Default) (db_city.Default, *runtime.Error)
func OnAddCity (fn FuncAddCity) {
	fnAddCity = fn
}

// Action: API.System.City:GetCityList
var fnGetCityList FuncGetCityList
type FuncGetCityList = func(ctx *runtime.Context, country string) (CityList, *runtime.Error)
func OnGetCityList (fn FuncGetCityList) {
	fnGetCityList = fn
}

func init() {
	runtime.RegisterHandler("API.System.City:AddCity", func(ctx *runtime.Context, data []byte) *runtime.Return {
		var v struct {
			City db_city.Default `json:"city" required:"true"`
		}
		if err := runtime.JsonUnmarshal(data, &v); err != nil {
			return nil
		}

		if fnAddCity == nil {
			return &runtime.Return{Code: runtime.ErrActionNotImplemented, Message: "API.System.City:AddCity is not implemented"}
		} else if result, err := fnAddCity(ctx, v.City); err != nil {
			return &runtime.Return{Code: err.Code(), Message: err.Error()}
		} else {
			return &runtime.Return{Data: result}
		}
	})
	runtime.RegisterHandler("API.System.City:GetCityList", func(ctx *runtime.Context, data []byte) *runtime.Return {
		var v struct {
			Country string `json:"country" required:"true"`
		}
		if err := runtime.JsonUnmarshal(data, &v); err != nil {
			return nil
		}

		if fnGetCityList == nil {
			return &runtime.Return{Code: runtime.ErrActionNotImplemented, Message: "API.System.City:GetCityList is not implemented"}
		} else if result, err := fnGetCityList(ctx, v.Country); err != nil {
			return &runtime.Return{Code: err.Code(), Message: err.Error()}
		} else {
			return &runtime.Return{Data: result}
		}
	})
}
// tag-rt-api-builder-end